<?phpnamespace KooijmanInc\Suzie\FormBuilder\FormCollector;use KooijmanInc\Suzie\Exception\NotSupported;use KooijmanInc\Suzie\FormBuilder\FormParts\Form\Form;use KooijmanInc\Suzie\FormBuilder\FormParts\Form\FormInterface;/** * Class AbstractFormCollector * @property string $id */abstract class AbstractFormCollector implements FormCollectorInterface{    /**     * @var string     */    protected string $id;    /**     * @var string     */    protected string $uuid;    /**     * @var FormInterface     */    protected FormInterface $form;    public function __construct(string $id)    {        $this->uuid = uniqid(str_replace('\\', '-', get_class($this)) . '-', true);        $this->id = $id;        $this->form = new Form($this->id);    }    /**     * @return FormInterface     */    public function getForm(): FormInterface    {        return $this->form;    }    public function &__get(string $name)    {        $accessor = "get".ucfirst($name);        if (method_exists($this, $accessor) && is_callable([$this, $accessor])) {            $value = $this->$accessor();            return $value;        }        throw new NotSupported("__get: property or method ".get_called_class()."::{$name} is not supported");    }    /**     * @param string $name     * @param array $arguments     * @return mixed     * @throws NotSupported     */    public function __call(string $name, array $arguments)    {        if (empty($arguments) && $this->__isset($name)) {            return $this->__get($name);        }        throw new NotSupported('__call (' . $name . ') with args: (' . print_r($arguments, true) . ') is not supported.');    }    public function __isset(string $name)    {        if (property_exists($this, $name)) {            return true;        }        return false;    }}