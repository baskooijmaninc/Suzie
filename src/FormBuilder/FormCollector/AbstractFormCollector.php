<?phpnamespace KooijmanInc\Suzie\FormBuilder\FormCollector;use KooijmanInc\Suzie\Exception\NotSupported;use KooijmanInc\Suzie\FormBuilder\FormParts\Form\Form;use KooijmanInc\Suzie\FormBuilder\FormParts\Form\FormInterface;use KooijmanInc\Suzie\FormBuilder\FormParts\Input\Input;use KooijmanInc\Suzie\FormValidation\FormValidation;use KooijmanInc\Suzie\Object\FormObject\ObjectStorage;use Symfony\Component\HttpFoundation\RequestStack;use Symfony\Contracts\Translation\TranslatorInterface;/** * Class AbstractFormCollector * @property string $id */#[\AllowDynamicProperties]abstract class AbstractFormCollector implements FormCollectorInterface{    /**     * @var string     */    protected string $id;    /**     * @var string     */    protected string $uuid;    /**     * @var FormInterface     */    protected FormInterface $form;    /**     * @var     */    protected $formElements;    protected $formElementsValidation;    /**     * @var array     */    private array $toBeSet = [];    public function __construct(string $id, protected RequestStack $requestStack, protected TranslatorInterface $translator)    {        $this->uuid = uniqid(str_replace('\\', '-', get_class($this)) . '-', true);        $this->id = $id;        $this->form = new Form($this->id);    }    public function getFormElements()    {        return $this->formElements;    }    public function setFormElements(array $data = [], array $base = [])    {        $objectStorage = $this->createObjectStorageObject();        if ($base === [] && ($data[0]) && count($data[0]) === 2) {            $base = $data[0][1];            $data = $data[0][0];        }        foreach ($this->sanitizeFormElementsArray($data, $base) as $elements) {            $element = new Input($elements['id']);            if ($elements['formElement'] === 'button') {                $element->formElement($elements['formElement']);                $element->showLabel(false);                $element->class('btn btn-primary');            }            if ($elements['formElement'] === 'select') {                $element->formElement($elements['formElement']);                $element->class('form-select');            }            if ($elements['name'] !== null && (strtolower($elements['name']) === 'email' || strtolower($elements['name']) === 'password')) {                $element->elementType(strtolower($elements['name']));            }            $element->value($elements['value']);            $element->defaultValue($elements['default']);            $objectStorage->attach($element, $elements['formElement']);            $this->{$elements['formElement']} = $element;        }        $this->formElements = $objectStorage;        return $objectStorage;    }    public function getFormElementsValidation()    {        return $this->formElementsValidation;    }    public function setFormElementsValidation(...$formAndElement)    {        $objectStorage = $this->createObjectStorageObject();        foreach ($this->toBeSet as $inputs) {            $name = $inputs."Validation";            $validation = new FormValidation($this->requestStack, $this->{$inputs}->id."Validation", $this->translator);            $validation->setValidation($formAndElement[0][2][$inputs] ?? []);            $validation->setPrevious();            $validation->setIsValidated($formAndElement[0][0] ?? null, $formAndElement[0][1]->$inputs ?? null);            $objectStorage->attach($validation, $name);            $this->$name = $validation;        }        $this->formElementsValidation = $objectStorage;        return $objectStorage;    }    /**     * @return FormInterface     */    public function getForm(): FormInterface    {        return $this->form;    }    public function &__get(string $name)    {        $accessor = "get".ucfirst($name);        if (method_exists($this, $accessor) && is_callable([$this, $accessor])) {            $value = $this->$accessor();            return $value;        } elseif (property_exists($this, $name)) {            return $this->$name;        }        throw new NotSupported("__get: property or method ".get_called_class()."::{$name} is not supported");    }    /**     * @param $name     * @param $value     * @return mixed     * @throws NotSupported     */    public function __set($name, $value)    {        $accessor = "set".ucfirst($name);        if (method_exists($this, $accessor) && is_callable([$this, $accessor])) {            return $this->$accessor($value);        } elseif (property_exists($this, $name) || in_array($name, $this->toBeSet, true) || in_array(str_replace('Validation', '', $name), $this->toBeSet, true)) {            return $this->{$name} = $value;        }        throw new NotSupported("__set: property or method ".get_called_class()."::{$name} is not supported");    }    /**     * @param string $name     * @param array $arguments     * @return mixed     * @throws NotSupported     */    public function __call(string $name, $arguments)    {        if (empty($arguments) && $this->__isset($name)) {            return $this->__get($name);        } elseif (!empty($arguments)) {            return $this->__set($name, $arguments);        }        throw new NotSupported("__call (".get_called_class()."::{$name}) with args: (".print_r($arguments, true).") is not supported.");    }    public function __isset(string $name)    {        if (property_exists($this, $name)) {            return true;        }        return false;    }    protected function createObjectStorageObject()    {        return new ObjectStorage();    }    private function sanitizeFormElementsArray($data, $base)    {        $a=0;        foreach ($data as $k => $v) {            if (isset($base['id'])) {                $baseId = $base['id'];                $id = "{$base['id']}-{$k}";            }            if ($v['Default'] === 'UNIXTIMESTAMP') {                $value = time();            } else {                $value = $v['Default'];            }            $formElements[$a] = ['id' => $id, 'formElement' => $k, 'value' => $value, 'default' => $v['Default'], 'name' => $v['Field']];            $this->toBeSet[$a] = $k;            $a++;        }        $formElements[$a] = ['id' => "$baseId-button", 'formElement' => 'button', 'value' => null, 'default' => null, 'name' => null];        $this->toBeSet[$a] = 'button';        return $formElements ?? [];    }}