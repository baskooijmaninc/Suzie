<?phpnamespace KooijmanInc\Suzie\FormBuilder;use KooijmanInc\Suzie\Exception\NotSupported;use KooijmanInc\Suzie\FormBuilder\FormCollector\FormCollectorInterface;use KooijmanInc\Suzie\FormBuilder\FormParts\Form\FormInterface;use KooijmanInc\Suzie\FormBuilder\FormParts\Input\InputInterface;use KooijmanInc\Suzie\Helper\Common;use KooijmanInc\Suzie\Object\FormObject\ObjectStorage;use KooijmanInc\Suzie\SuzieInterface;use Symfony\Contracts\Service\Attribute\Required;use Symfony\Contracts\Translation\TranslatorInterface;abstract class AbstractFormBuilder implements FormBuilderInterface{    /**     * @var string     */    protected string $uuid;    /**     * @var SuzieInterface     */    protected SuzieInterface $suzie;    /**     * @var FormCollectorInterface     */    protected FormCollectorInterface $formCollector;    /**     * @var TranslatorInterface     */    protected TranslatorInterface $translator;    protected RequestStack $requestStack;    /**     * @var array     */    protected array $toBeSetInputs = [];    /**     * @var FormInterface     */    protected FormInterface $form;    /**     * @var     */    protected $formElements;    /**     * @var string     */    protected string $completeForm;    #[Required]    public function init(RequestStack $requestStack)    {        $this->requestStack = $requestStack;    }    /**     * @param SuzieInterface $suzie     * @param TranslatorInterface $translator     */    public function __construct(SuzieInterface $suzie, TranslatorInterface $translator)    {        $this->uuid = uniqid(str_replace('\\', '-', get_class($this)) . '-', true);        $this->suzie = $suzie;        $this->translator = $translator;    }    public function getUuid(): string    {        return $this->uuid;    }    /**     * @return FormInterface     */    public function getForm(): FormInterface    {        $this->form = $this->formCollector->form;        return $this->form;    }    public function getCompleteForm()    {        if (!isset($this->completeForm)) {            $this->setCompleteForm();        }        return $this->completeForm;    }    public function getFormElements()    {        return $this->formElements;    }    public function setFormElements(array $elements)    {dump($this->requestStack);        $this->formElements = $this->formCollector->formElements($elements);        $this->setElements();        return $this;    }    public function setElements()    {        if (!isset($this->form)) {            $this->form = $this->getForm();        }        foreach ($this->formElements as $element => $value) {            $showElement[] = $element;            if (isset($this->form->showElements[1]) && (!in_array($element, $this->form->showElements) && $element !== 'button')) {                $this->formElements->$element->showElement(false);                unset($this->$element);            } else {                $this->formElements->$element->showElement(true);                $this->$element = $this->setFormElement($this->formElements->$element);            }        }        if (!isset($this->form->showElements)) {            $this->form->showElements($showElement);        }        $this->setCompleteForm();        return $this;    }    public function &__get(string $name)    {        $accessor = "get" . ucfirst($name);        if (method_exists($this, $accessor) && is_callable([$this, $accessor])) {            $value = $this->$accessor();            return $value;        } elseif (property_exists($this, $name)) {            return $this->$name;        }        throw new NotSupported("__get: property or method ".get_called_class()."::{$name} is not supported");    }    public function __set(string $name, $value)    {        $accessor = "set" . ucfirst($name);        if (method_exists($this, $accessor) && is_callable([$this, $accessor])) {            return $this->$accessor($value);        } elseif (property_exists($this, $name)) {            return $this->$name = $value;        } elseif (!property_exists($this, $name) && (array_key_exists($name, $this->toBeSetInputs) || $name === 'button')) {            return $this->$name = $value;        }        throw new NotSupported("__set: property or method ".get_called_class()."::{$name} is not supported");    }    public function __isset(string $name)    {        if (property_exists($this, $name)) {            return true;        }        return false;    }    /**     * @param array $inputs     * @return void     */    public function toBeSetInputs(array $inputs): void    {        foreach ($inputs as $key => $value) {            if (!isset($this->toBeSetInputs[$key])) {                $this->toBeSetInputs[$key] = $value;            }        }    }    public function getFormInput(...$input)    {        $input = $input[0] ?? [];        if ($this->form->elementSize === 'sm' ?? $this->form->elementSize === 'lg') {            $input['class'] .= " form-control-{$this->form->elementSize}";        }        $return = "<input";            $return .= ($input['id']) ? " id=\"".Common::encrypt($input['id'])."\"" : null;            $return .= ($input['name']) ? " name=\"".Common::encrypt($input['name'])."\"" : null;            $return .= ($input['placeholder']) ? " placeholder=\"{$this->translator->trans($input['placeholder'], [], $input['domain'])}\"" : null;            $return .= ($input['value']) ? " value=\"{$input['value']}\"" : null;        $return .= " class=\"{$input['class']}\">";        return $return;    }    public function getFormSelect(...$select)    {        $select = $select[0] ?? [];        if ($this->form->elementSize === 'sm' ?? $this->form->elementSize === 'lg') {            $select['class'] .= " form-select-{$this->form->elementSize}";        }        $return = "<select";            $return .= ($select['id']) ? " id=\"".Common::encrypt($select['id'])."\"" : null;            $return .= ($select['name']) ? " name=\"".Common::encrypt($select['name'])."\"" : null;            $return .= " class=\"form-select";            $return .= ($select['class']) ? "{$select['class']}" : null;        $return .= ">";        $return .= "</select>";        return $return;    }    /**     * @param ...$button     * @return string     */    public function getFormButton(...$button): string    {        $button = $button[0] ?? [];        if ($this->form->elementSize === 'sm' ?? $this->form->elementSize === 'lg') {            $button['class'] .= " btn-{$this->form->elementSize}";        }        $return = "<button";            $return .= ($button['name']) ? " name=\"".Common::encrypt($button['name'])."\"" : null;            $return .= ($button['value']) ? " value=\"{$button['value']}\"" : null;        $return .= " class=\"{$button['class']}\">";            $return .= $this->translator->trans($button['displayName'], [], $button['domain']);        $return .= "</button>";        return $return;    }    /**     * @return $this     */    public function setCompleteForm(): static    {        $this->completeForm = "<form action=\"{$this->form->action}\" method=\"{$this->form->method}\"{$this->form->encType}{$this->form->target}{$this->form->autoComplete}{$this->form->acceptCharset}{$this->form->name}{$this->form->rel}{$this->form->novalidate}>";        if ($this->form->showElements === []) {            $this->form->showElements(array_keys($this->toBeSetInputs));        }        if ($this->form->standardForm === true) {            foreach ($this->form->showElements as $element) {                if (property_exists($this->formElements, $element)) {                    $this->completeForm .= "<div class=\"mb-3{$this->hasLabel($this->formElements->$element)}\">";                        $inputElement = $this->setFormElement($this->formElements->$element);                        $this->completeForm .= $inputElement;                    $this->completeForm .= "</div>";                }            }            $this->completeForm .= "<div class=\"mb-3{$this->hasLabel($this->formElements->button)}\">";            $inputElement = $this->setFormElement($this->formElements->button);                $this->completeForm .= $inputElement;            $this->completeForm .= "</div>";        }        $this->completeForm .= "</form>";        return $this;    }    /**     * @param string $name     * @param array $arguments     * @return mixed     * @throws NotSupported     */    public function __call(string $name, $arguments)    {        if (empty($arguments) && $this->__isset($name)) {            return $this->__get($name);        } elseif (!empty($arguments)) {            return $this->__set($name, $arguments);        }        throw new NotSupported("__call (".get_called_class()."::{$name}) with args: (".print_r($arguments, true).") is not supported.");    }    /**     * @return ObjectStorage     */    protected function createObjectStorageObject(): ObjectStorage    {        return new ObjectStorage($this->suzie);    }    /**     * @param InputInterface $input     * @return string|null     */    protected function setFormElement(InputInterface $input): string|null    {        $return = ($input->formElement !== 'button') ? $this->label($input) : null;        if ($input->formElement === 'input') {            $return .= $this->getFormInput($this->getInputAttributes($input));        } elseif ($input->formElement === 'select') {            $return .= $this->getFormSelect($this->getSelectAttributes($input));        } elseif ($input->formElement === 'button') {            $return .= $this->getFormButton($this->getButtonAttributes($input));        }        if ($input->showLabel === true && $this->form->showAllLabels !== false) {            $return .= "</div>";        }        return $return ?? null;    }    /**     * @param InputInterface $input     * @return string     */    protected function label(InputInterface $input): string    {        if ($this->form->showAllLabels === false) {            $class = "visually-hidden";            $div = null;        } elseif ($input->showLabel === true) {            $class = "col-form-label col-sm-3";            $div = "<div class=\"col-sm-9\">";        } else {            $class = "visually-hidden";            $div = null;        }        if ($input->displayName === null) {            $displayName = $input->name;        } else {            $displayName = $input->displayName;        }        return "<label for=\"".Common::encrypt($input->name)."\" class=\"{$class}\">{$this->translator->trans($displayName, [], $input->domain)}:</label>{$div}";    }    /**     * @param InputInterface $input     * @return string|null     */    public function hasLabel(InputInterface $input): ?string    {        if ($this->form->showAllLabels === false) {            return null;        } elseif ($input->showLabel === true) {            return " row";        }        return null;    }    /**     * @param InputInterface $input     * @return array     */    protected function getInputAttributes(InputInterface $input): array    {        $return = ['id' => $input->name, 'name' => $input->name, 'class' => $input->class, 'domain' => $input->domain];        if ($this->form->showAllPlaceholders === true) {            $return['placeholder'] = $input->displayName ?? $input->name;        }        if ($this->form->showAllValues === true) {            $return['value'] = $input->value;        }        return $return;    }    /**     * @param InputInterface $input     * @return array     */    protected function getSelectAttributes(InputInterface $input): array    {        return ['id' => $input->name, 'name' => $input->name, 'domain' => $input->domain];    }    /**     * @param InputInterface $input     * @return array     */    protected function getButtonAttributes(InputInterface $input): array    {        $return = ['id' => $input->name, 'name' => $input->name, 'displayName' => $input->displayName ?? $input->name, 'class' => $input->class, 'domain' => $input->domain];        if ($this->form->showAllValues === true) {            $return['value'] = $input->value;        }        return $return;    }}