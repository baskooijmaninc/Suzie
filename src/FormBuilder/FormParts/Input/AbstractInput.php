<?phpnamespace KooijmanInc\Suzie\FormBuilder\FormParts\Input;use KooijmanInc\Suzie\Exception\NotSupported;/** * Class AbstractInput * @property string $id */abstract class AbstractInput implements InputInterface{    /**     * @var string     */    protected string $id;    /**     * @var string     */    protected string $uuid;    /**     * @var string     */    protected string $name;    /**     * @var string     */    protected string $formElement = 'input';    /**     * @var array     */    protected array $formElementAllowed = ['input', 'textarea', 'select'];    /**     * @param string $id     */    public function __construct(string $id)    {        $name = explode('-', $id);        $this->uuid = uniqid(str_replace('\\', '-', get_class($this)) . '-', true);        $this->id = $id;        $this->name = end($name);    }    public function getName()    {        return $this->name;    }    public function getFormElement()    {        return $this->formElement;    }    public function setFormElement($element)    {        if (in_array($element, $this->formElementAllowed)) {            $this->formElement = $element;            return $this;        }        throw new NotSupported("Form element [$element] not supported.");    }    public function &__get(string $name)    {        $accessor = "get" . ucfirst($name);        if (method_exists($this, $accessor) && is_callable([$this, $accessor])) {            $value = $this->$accessor();            return $value;        } else {            dump("__get: ", $name);        }        throw new NotSupported("__get: property or method ".get_called_class()."::{$name} is not supported");    }    public function __set(string $name, $value)    {        $accessor = 'set' . ucfirst($name);        if (method_exists($this, $accessor) && is_callable([$this, $accessor])) {            return $this->$accessor($value[0] ?? null);        }        throw new NotSupported("__set: property or method ".get_called_class()."::{$name} is not supported");    }    public function __call(string $name, array $arguments)    {        if (!empty($arguments)) {            return $this->__set($name, $arguments);        }        throw new NotSupported("__call (".get_called_class()."::$name) with args: (".implode($arguments).") is not supported.");    }}