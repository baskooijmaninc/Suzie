<?phpnamespace KooijmanInc\Suzie\FormBuilder\FormParts\Input;use KooijmanInc\Suzie\Exception\NotSupported;/** * Class AbstractInput * @property string $id */abstract class AbstractInput implements InputInterface{    /**     * @var string     */    protected string $id;    /**     * @var string     */    protected string $uuid;    /**     * @var string     */    protected string $name;    /**     * @var string     */    protected string $formElement = 'input';    /**     * @var string     */    protected string $elementType = 'text';    /**     * @var bool     */    protected bool $showElement = true;    /**     * @var bool     */    protected bool $showLabel = true;    /**     * @var string|null     */    protected ?string $displayName = null;    /**     * @var string|null     */    protected ?string $domain = null;    /**     * @var string|null     */    protected ?string $class = 'form-control';    /**     * @var bool     */    protected bool $lockedValue = false;    /**     * @var string|null     */    protected ?string $value = null;    protected $defaultValue = null;    /**     * @var array     */    protected array $formElementAllowed = ['input', 'textarea', 'select', 'button'];    protected array $elementTypeAllowed = ['checkbox', 'color', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'search', 'tel', 'text', 'time', 'url', 'week'];    /**     * @param string $id     */    public function __construct(string $id)    {        $name = explode('-', $id);        $this->uuid = uniqid(str_replace('\\', '-', get_class($this)) . '-', true);        $this->id = $id;        $this->name = end($name);    }    /**     * @return string     */    public function getId(): string    {        return $this->id;    }    /**     * @return string     */    public function getName(): string    {        return $this->name;    }    /**     * @param string $name     * @return $this     * @throws NotSupported     */    public function setName(string $name): static    {        if ($this->formElement === 'button' && is_string($name)) {            $this->name = $name;            return $this;        }        throw new NotSupported("Only button name can be changed to [$name] other not supported.");    }    /**     * @return string     */    public function getFormElement(): string    {        return $this->formElement;    }    /**     * @param $element     * @return $this     * @throws NotSupported     */    public function setFormElement($element): static    {        if (in_array($element, $this->formElementAllowed)) {            $this->formElement = $element;            return $this;        }        throw new NotSupported("Form element [$element] not supported.");    }    /**     * @return string     */    public function getElementType(): string    {        return $this->elementType;    }    /**     * @param $element     * @return $this     * @throws NotSupported     */    public function setElementType($type): static    {        if (in_array($type, $this->elementTypeAllowed) && $this->formElement === 'input') {            $this->elementType = $type;            return $this;        }        throw new NotSupported("Form element [$type] not supported.");    }    public function getShowElement()    {        return $this->showElement;    }    public function setShowElement($element)    {        if (is_bool($element)) {            $this->showElement = $element;            return $this;        }        throw new NotSupported("Form element [$element] not supported.");    }    public function getShowLabel()    {        return $this->showLabel;    }    public function setShowLabel($label)    {        if (is_bool($label)) {            $this->showLabel = $label;            return $this;        }        throw new NotSupported("Show label [$label] not supported.");    }    public function getDisplayName()    {        return $this->displayName;    }    public function setDisplayName(string $displayName)    {        if (is_string($displayName)) {            $this->displayName = $displayName;            return $this;        }        throw new NotSupported("Button class [$displayName] not supported.");    }    public function getDomain()    {        return $this->domain;    }    public function getClass()    {        return $this->class;    }    public function setClass(string $class)    {        if (is_string($class)) {            $this->class = $class;            return $this;        }        throw new NotSupported("Button class [$class] not supported.");    }    public function addClass(string $class)    {        if (is_string($class)) {            $this->class = $this->class . $class;            return $this;        }        throw new NotSupported("Button class [$class] not supported.");    }    public function getLockedValue()    {        return $this->lockedValue;    }    public function setLockedValue(string $value)    {        if (is_string($value)) {            $this->lockedValue = true;            $this->value = $value;        }        return $this;    }    public function getValue()    {        return $this->value;    }    public function setValue($value)    {        if (is_string($value)) {            $this->value = $value;        }        return $this;    }    public function getDefaultValue()    {        return $this->value;    }    public function setDefaultValue($value)    {        if (is_string($value) || is_int($value) || is_bool($value) || $value === null) {            $this->defaultValue = $value;        }        return $this;    }    public function &__get(string $name)    {        $accessor = "get" . ucfirst($name);        if (method_exists($this, $accessor) && is_callable([$this, $accessor])) {            $value = $this->$accessor();            return $value;        } else {            dump("__get: ", $name);        }        throw new NotSupported("__get: property or method ".get_called_class()."::{$name} is not supported");    }    public function __set(string $name, $value)    {        $accessor = 'set' . ucfirst($name);        if (method_exists($this, $accessor) && is_callable([$this, $accessor])) {            return $this->$accessor($value[0] ?? null);        }        throw new NotSupported("__set: property or method ".get_called_class()."::{$name} is not supported");    }    public function __call(string $name, $arguments)    {        if (!empty($arguments)) {            return $this->__set($name, $arguments);        }        throw new NotSupported("__call (".get_called_class()."::$name) with args: (".implode($arguments).") is not supported.");    }}